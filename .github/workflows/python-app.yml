# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  docker-compose-build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        lfs: True
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
        
    # - name: Install dependencies
    #   run: |
    #     python -m pip install --upgrade pip
    #     pip install flake8 pytest
    #     if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    # - name: Lint with flake8
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USER }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Docker Compose Build and Push
      run: |
        docker compose build --no-cache
        docker compose push
  
  # docker-pull-ec2:
  #   needs: docker-compose-build
    
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - name: Creating SSH Configuration File
  #     env:
  #       SSH_USER: ${{ secrets.SSH_USER }}
  #       SSH_KEY: ${{ secrets.SSH_KEY }}
  #       SSH_HOST: ${{ secrets.SSH_HOST }}
  #       DOCKER_USER: ${{ secrets.DOCKER_HUB_USER }}
  #     run: |
  #       mkdir -p ~/.ssh/
  #       echo "$SSH_KEY" > ~/.ssh/deployment.pem
  #       chmod 600 ~/.ssh/deployment.pem
  #       cat >> ~/.ssh/config <<END
  #       Host deploy_ec2
  #         HostName $SSH_HOST
  #         User $SSH_USER
  #         IdentityFile ~/.ssh/deployment.pem
  #         StrictHostKeyChecking no
  #       END
        
    # - name: Deploy to EC2
    #   run: |
    #     ssh deploy_ec2 "mkdir temp/"
    #     ssh deploy_ec2 "git clone git@github.com:cbagusjk/ml_process_demo.git temp/"
    #     ssh deploy_ec2 "rsync -a ./temp ./ml_process_demo"
    #     ssh deploy_ec2 "rm -rf temp/"
    #     ssh deploy_ec2 "cd ml_process_demo && git lfs pull"
    #     ssh deploy_ec2 "cd ml_process_demo && sudo docker compose rm -s api && sudo docker compose rm -s streamlit"
    #     ssh deploy_ec2 "cd ml_process_demo || sudo docker rmi cbagusjk/ml_process_api || sudo docker rmi cbagusjk/ml_process_streamlit"
    #     ssh deploy_ec2 "cd ml_process_demo && sudo docker compose pull && sudo docker compose up -d"
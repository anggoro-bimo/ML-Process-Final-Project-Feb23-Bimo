import pandas as pd
import sys
sys.path.append('/root/ml_process_feb23/')
import src.util as utils
import copy
from sklearn.model_selection import train_test_split

# Load from configuration file
config = utils.load_config()

def read_raw_data(config: dict) -> pd.DataFrame:
    # Return raw dataset
    credit_data = pd.read_csv(config["dataset_original_path"])
    return credit_data

def check_data(input_data: pd.DataFrame, config: dict, api: bool = False):
    input_data = copy.deepcopy(input_data)
    config = copy.deepcopy(config)

    if not api:
            # Check data types
            assert input_data.select_dtypes("object").columns.to_list() == \
                config["object_columns"], "input error, please fill the column(s) with 'yes' or 'no'."
            assert input_data.select_dtypes("int").columns.to_list() == \
                config["int_columns"], "input error, please fill the column(s) with any numeric character."
            assert input_data.select_dtypes("float").columns.to_list() == \
                config["float_columns"], "input error, please fill the column(s) with any numeric (decimal value is allowed) character."
    else:
        # In case checking data from api
        # Exclude the "card" feature, which is not a predictor
        object_columns = config["object_columns"]
        del object_columns[0] 

        # Check data types
        assert input_data.select_dtypes("object").columns.to_list() == \
            object_columns, "an error occurs in object column(s)."       

    assert set(input_data[config["object_columns"][1]]).issubset(set(config["range_owner"])), \
        "an error occurs in owner range."
    assert set(input_data[config["object_columns"][2]]).issubset(set(config["range_selfemp"])), \
        "an error occurs in selfemp range."
    assert input_data[config["int_columns"][0]].between(config["range_reports"][0], config["range_reports"][1]).sum() == \
        len(input_data), "an error occurs in reports range."
    assert input_data[config["float_columns"][0]].between(config["range_age"][0], config["range_age"][1]).sum() == \
        len(input_data), "an error occurs in age range."
    assert input_data[config["float_columns"][1]].between(config["range_income"][0], config["range_income"][1]).sum() == \
        len(input_data), "an error occurs in income range."
    assert input_data[config["float_columns"][2]].between(config["range_share"][0], config["range_share"][1]).sum() == \
        len(input_data), "an error occurs in share range."
    assert input_data[config["float_columns"][3]].between(config["range_expenditure"][0], config["range_expenditure"][1]).sum() == \
        len(input_data), "an error occurs in expenditure range."
    assert input_data[config["int_columns"][1]].between(config["range_dependents"][0], config["range_dependents"][1]).sum() == \
        len(input_data), "an error occurs in dependents range."    
    assert input_data[config["int_columns"][2]].between(config["range_months"][0], config["range_months"][1]).sum() == \
        len(input_data), "an error occurs in months range."
    assert input_data[config["int_columns"][3]].between(config["range_majorcards"][0], config["range_majorcards"][1]).sum() == \
        len(input_data), "an error occurs in majorcards range."
    assert input_data[config["int_columns"][4]].between(config["range_active"][0], config["range_active"][1]).sum() == \
        len(input_data), "an error occurs in active range."
   
